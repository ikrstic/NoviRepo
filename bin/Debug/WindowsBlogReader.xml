<?xml version="1.0"?>
<doc>
<assembly>
<name>
WindowsBlogReader
</name>
</assembly>
<members>
<member name="F:WindowsBlogReader.Common.RichTextColumns.RichTextContentProperty">
	<summary>
 Identifies the <see cref="P:WindowsBlogReader.Common.RichTextColumns.RichTextContent"/> dependency property.
 </summary>
</member><member name="F:WindowsBlogReader.Common.RichTextColumns.ColumnTemplateProperty">
	<summary>
 Identifies the <see cref="P:WindowsBlogReader.Common.RichTextColumns.ColumnTemplate"/> dependency property.
 </summary>
</member><member name="M:WindowsBlogReader.Common.RichTextColumns.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:WindowsBlogReader.Common.RichTextColumns"/> class.
 </summary>
</member><member name="P:WindowsBlogReader.Common.RichTextColumns.RichTextContent">
	<summary>
 Gets or sets the initial rich text content to be used as the first column.
 </summary>
</member><member name="P:WindowsBlogReader.Common.RichTextColumns.ColumnTemplate">
	<summary>
 Gets or sets the template used to create additional
 <see cref="T:Windows.UI.Xaml.Controls.RichTextBlockOverflow"/> instances.
 </summary>
</member><member name="M:WindowsBlogReader.Common.RichTextColumns.ResetOverflowLayout(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
	<summary>
 Invoked when the content or overflow template is changed to recreate the column layout.
 </summary>
	<param name="d">Instance of <see cref="T:WindowsBlogReader.Common.RichTextColumns"/> where the change
 occurred.</param>
	<param name="e">Event data describing the specific change.</param>
</member><member name="F:WindowsBlogReader.Common.RichTextColumns._overflowColumns">
	<summary>
 Lists overflow columns already created.  Must maintain a 1:1 relationship with
 instances in the <see cref="P:Windows.UI.Xaml.Controls.Panel.Children"/> collection following the initial
 RichTextBlock child.
 </summary>
</member><member name="M:WindowsBlogReader.Common.RichTextColumns.MeasureOverride(Windows.Foundation.Size)">
	<summary>
 Determines whether additional overflow columns are needed and if existing columns can
 be removed.
 </summary>
	<param name="availableSize">The size of the space available, used to constrain the
 number of additional columns that can be created.</param>
	<returns>The resulting size of the original content plus any extra columns.</returns>
</member><member name="M:WindowsBlogReader.Common.RichTextColumns.ArrangeOverride(Windows.Foundation.Size)">
	<summary>
 Arranges the original content and all extra columns.
 </summary>
	<param name="finalSize">Defines the size of the area the children must be arranged
 within.</param>
	<returns>The size of the area the children actually required.</returns>
</member><member name="T:WindowsBlogReader.Common.RichTextColumns">
	<summary>
 Wrapper for <see cref="T:Windows.UI.Xaml.Controls.RichTextBlock"/> that creates as many additional overflow
 columns as needed to fit the available content.
 </summary>
	<example>
 The following creates a collection of 400-pixel wide columns spaced 50 pixels apart
 to contain arbitrary data-bound content:
 <code>
			<RichTextColumns>
				<RichTextColumns.ColumnTemplate>
					<DataTemplate>
						<RichTextBlockOverflow Width="400" Margin="50,0,0,0"/>
					</DataTemplate>
				</RichTextColumns.ColumnTemplate>
				<RichTextBlock Width="400">
					<Paragraph>
						<Run Text="{Binding Content}"/>
					</Paragraph>
				</RichTextBlock>
			</RichTextColumns>
		</code>
	</example>
	<remarks>Typically used in a horizontally scrolling region where an unbounded amount of
 space allows for all needed columns to be created.  When used in a vertically scrolling
 space there will never be any additional columns.</remarks>
</member><member name="T:WindowsBlogReader.Common.BooleanNegationConverter">
	<summary>
 Value converter that translates true to false and vice versa.
 </summary>
</member><member name="T:WindowsBlogReader.Common.BooleanToVisibilityConverter">
	<summary>
 Value converter that translates true to <see cref="F:Windows.UI.Xaml.Visibility.Visible"/> and false to
 <see cref="F:Windows.UI.Xaml.Visibility.Collapsed"/>.
 </summary>
</member><member name="E:WindowsBlogReader.Common.BindableBase.PropertyChanged">
	<summary>
 Multicast event for property change notifications.
 </summary>
</member><member name="M:WindowsBlogReader.Common.BindableBase.SetProperty``1(``0@,``0,System.String)">
	<summary>
 Checks if a property already matches a desired value.  Sets the property and notifies
 listeners only when necessary.
 </summary>
	<typeparam name="T">Type of the property.</typeparam>
	<param name="storage">Reference to a property with both getter and setter.</param>
	<param name="value">Desired value for the property.</param>
	<param name="propertyName">Name of the property used to notify listeners.  This value
 is optional and can be provided automatically when invoked from compilers that support
 CallerMemberName.</param>
	<returns>True if the value was changed, false if the existing value matched the
 desired value.</returns>
</member><member name="M:WindowsBlogReader.Common.BindableBase.OnPropertyChanged(System.String)">
	<summary>
 Notifies listeners that a property value has changed.
 </summary>
	<param name="propertyName">Name of the property used to notify listeners.  This value
 is optional and can be provided automatically when invoked from compilers that support
 <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
</member><member name="T:WindowsBlogReader.Common.BindableBase">
	<summary>
 Implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> to simplify models.
 </summary>
</member><member name="M:WindowsBlogReader.App.OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
	<summary>
 Invoked when the application is launched normally by the end user.  Other entry points
 will be used when the application is launched to open a specific file, to display
 search results, and so forth.
 </summary>
	<param name="args">Details about the launch request and process.</param>
</member><member name="M:WindowsBlogReader.App.OnSuspending(System.Object,Windows.ApplicationModel.SuspendingEventArgs)">
	<summary>
 Invoked when application execution is being suspended.  Application state is saved
 without knowing whether the application will be terminated or resumed with the contents
 of memory still intact.
 </summary>
	<param name="sender">The source of the suspend request.</param>
	<param name="e">Details about the suspend request.</param>
</member><member name="T:WindowsBlogReader.App">
	<summary>
 Provides application-specific behavior to supplement the default Application class.
 </summary>
</member><member name="M:WindowsBlogReader.ItemsPage.LoadState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
	<summary>
 Populates the page with content passed during navigation.  Any saved state is also
 provided when recreating a page from a prior session.
 </summary>
	<param name="navigationParameter">The parameter value passed to <see cref="M:Windows.UI.Xaml.Controls.Frame.Navigate(System.Type,System.Object)"/>
 when this page was initially requested.
 </param>
	<param name="pageState">A dictionary of state preserved by this page during an earlier
 session.  This will be null the first time a page is visited.</param>
</member><member name="T:WindowsBlogReader.ItemsPage">
	<summary>
 A page that displays a collection of item previews.  In the Split Application this page
 is used to display and select one of the available groups.
 </summary>
</member><member name="M:WindowsBlogReader.MainPage.OnNavigatedTo(Windows.UI.Xaml.Navigation.NavigationEventArgs)">
	<summary>
 Invoked when this page is about to be displayed in a Frame.
 </summary>
	<param name="e">Event data that describes how this page was reached.  The Parameter
 property is typically used to configure the page.</param>
</member><member name="T:WindowsBlogReader.MainPage">
	<summary>
 An empty page that can be used on its own or navigated to within a Frame.
 </summary>
</member><member name="P:WindowsBlogReader.Common.SuspensionManager.SessionState">
	<summary>
 Provides access to global session state for the current session.  This state is
 serialized by <see cref="M:WindowsBlogReader.Common.SuspensionManager.SaveAsync"/> and restored by
 <see cref="M:WindowsBlogReader.Common.SuspensionManager.RestoreAsync"/>, so values must be serializable by
 <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> and should be as compact as
 possible.  Strings and other self-contained data types are strongly recommended.
 </summary>
</member><member name="P:WindowsBlogReader.Common.SuspensionManager.KnownTypes">
	<summary>
 List of custom types provided to the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>
 when reading and writing session state.  Initially empty, additional types may be
 added to customize the serialization process.
 </summary>
</member><member name="M:WindowsBlogReader.Common.SuspensionManager.SaveAsync">
	<summary>
 Save the current <see cref="P:WindowsBlogReader.Common.SuspensionManager.SessionState"/>.  Any <see cref="T:Windows.UI.Xaml.Controls.Frame"/> instances
 registered with <see cref="M:WindowsBlogReader.Common.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String)"/> will also preserve their current
 navigation stack, which in turn gives their active <see cref="T:Windows.UI.Xaml.Controls.Page"/> an opportunity
 to save its state.
 </summary>
	<returns>An asynchronous task that reflects when session state has been saved.</returns>
</member><member name="M:WindowsBlogReader.Common.SuspensionManager.RestoreAsync">
	<summary>
 Restores previously saved <see cref="P:WindowsBlogReader.Common.SuspensionManager.SessionState"/>.  Any <see cref="T:Windows.UI.Xaml.Controls.Frame"/> instances
 registered with <see cref="M:WindowsBlogReader.Common.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String)"/> will also restore their prior navigation
 state, which in turn gives their active <see cref="T:Windows.UI.Xaml.Controls.Page"/> an opportunity restore its
 state.
 </summary>
	<returns>An asynchronous task that reflects when session state has been read.  The
 content of <see cref="P:WindowsBlogReader.Common.SuspensionManager.SessionState"/> should not be relied upon until this task
 completes.</returns>
</member><member name="M:WindowsBlogReader.Common.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String)">
	<summary>
 Registers a <see cref="T:Windows.UI.Xaml.Controls.Frame"/> instance to allow its navigation history to be saved to
 and restored from <see cref="P:WindowsBlogReader.Common.SuspensionManager.SessionState"/>.  Frames should be registered once
 immediately after creation if they will participate in session state management.  Upon
 registration if state has already been restored for the specified key
 the navigation history will immediately be restored.  Subsequent invocations of
 <see cref="M:WindowsBlogReader.Common.SuspensionManager.RestoreAsync"/> will also restore navigation history.
 </summary>
	<param name="frame">An instance whose navigation history should be managed by
 <see cref="T:WindowsBlogReader.Common.SuspensionManager"/></param>
	<param name="sessionStateKey">A unique key into <see cref="P:WindowsBlogReader.Common.SuspensionManager.SessionState"/> used to
 store navigation-related information.</param>
</member><member name="M:WindowsBlogReader.Common.SuspensionManager.UnregisterFrame(Windows.UI.Xaml.Controls.Frame)">
	<summary>
 Disassociates a <see cref="T:Windows.UI.Xaml.Controls.Frame"/> previously registered by <see cref="M:WindowsBlogReader.Common.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String)"/>
 from <see cref="P:WindowsBlogReader.Common.SuspensionManager.SessionState"/>.  Any navigation state previously captured will be
 removed.
 </summary>
	<param name="frame">An instance whose navigation history should no longer be
 managed.</param>
</member><member name="M:WindowsBlogReader.Common.SuspensionManager.SessionStateForFrame(Windows.UI.Xaml.Controls.Frame)">
	<summary>
 Provides storage for session state associated with the specified <see cref="T:Windows.UI.Xaml.Controls.Frame"/>.
 Frames that have been previously registered with <see cref="M:WindowsBlogReader.Common.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String)"/> have
 their session state saved and restored automatically as a part of the global
 <see cref="P:WindowsBlogReader.Common.SuspensionManager.SessionState"/>.  Frames that are not registered have transient state
 that can still be useful when restoring pages that have been discarded from the
 navigation cache.
 </summary>
	<remarks>Apps may choose to rely on <see cref="T:WindowsBlogReader.Common.LayoutAwarePage"/> to manage
 page-specific state instead of working with frame session state directly.</remarks>
	<param name="frame">The instance for which session state is desired.</param>
	<returns>A collection of state subject to the same serialization mechanism as
 <see cref="P:WindowsBlogReader.Common.SuspensionManager.SessionState"/>.</returns>
</member><member name="T:WindowsBlogReader.Common.SuspensionManager">
	<summary>
 SuspensionManager captures global session state to simplify process lifetime management
 for an application.  Note that session state will be automatically cleared under a variety
 of conditions and should only be used to store information that would be convenient to
 carry across sessions, but that should be disacarded when an application crashes or is
 upgraded.
 </summary>
</member><member name="M:WindowsBlogReader.DetailPage.LoadState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
	<summary>
 Populates the page with content passed during navigation.  Any saved state is also
 provided when recreating a page from a prior session.
 </summary>
	<param name="navigationParameter">The parameter value passed to
 <see cref="M:Windows.UI.Xaml.Controls.Frame.Navigate(System.Type,System.Object)"/> when this page was initially requested.
 </param>
	<param name="pageState">A dictionary of state preserved by this page during an earlier
 session.  This will be null the first time a page is visited.</param>
</member><member name="M:WindowsBlogReader.DetailPage.SaveState(System.Collections.Generic.Dictionary{System.String,System.Object})">
	<summary>
 Preserves state associated with this page in case the application is suspended or the
 page is discarded from the navigation cache.  Values must conform to the serialization
 requirements of <see cref="P:WindowsBlogReader.Common.SuspensionManager.SessionState"/>.
 </summary>
	<param name="pageState">An empty dictionary to be populated with serializable state.</param>
</member><member name="F:WindowsBlogReader.Common.LayoutAwarePage.DefaultViewModelProperty">
	<summary>
 Identifies the <see cref="P:WindowsBlogReader.Common.LayoutAwarePage.DefaultViewModel"/> dependency property.
 </summary>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.OnLoaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
	<summary>
 When this page is part of the visual tree make two changes:
 1) Map application view state to visual state for the page
 2) Handle keyboard and mouse navigation requests
 </summary>
	<param name="sender">The object that initiated the request.</param>
	<param name="e">Event data that describes how the request was made.</param>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.OnUnloaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
	<summary>
 Undo the changes made in <see cref="M:WindowsBlogReader.Common.LayoutAwarePage.OnLoaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)"/> when the page is no longer visible.
 </summary>
	<param name="sender">The object that initiated the request.</param>
	<param name="e">Event data that describes how the request was made.</param>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:WindowsBlogReader.Common.LayoutAwarePage"/> class.
 </summary>
</member><member name="P:WindowsBlogReader.Common.LayoutAwarePage.DefaultViewModel">
	<summary>
 An implementation of <see cref="T:Windows.Foundation.Collections.IObservableMap`2"/> designed to be
 used as a trivial view model.
 </summary>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.GoHome(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
	<summary>
 Invoked as an event handler to navigate backward in the page's associated
 <see cref="P:Windows.UI.Xaml.Controls.Page.Frame"/> until it reaches the top of the navigation stack.
 </summary>
	<param name="sender">Instance that triggered the event.</param>
	<param name="e">Event data describing the conditions that led to the event.</param>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.GoBack(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
	<summary>
 Invoked as an event handler to navigate backward in the navigation stack
 associated with this page's <see cref="P:Windows.UI.Xaml.Controls.Page.Frame"/>.
 </summary>
	<param name="sender">Instance that triggered the event.</param>
	<param name="e">Event data describing the conditions that led to the event.</param>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.GoForward(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
	<summary>
 Invoked as an event handler to navigate forward in the navigation stack
 associated with this page's <see cref="P:Windows.UI.Xaml.Controls.Page.Frame"/>.
 </summary>
	<param name="sender">Instance that triggered the event.</param>
	<param name="e">Event data describing the conditions that led to the event.</param>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.CoreDispatcher_AcceleratorKeyActivated(Windows.UI.Core.CoreDispatcher,Windows.UI.Core.AcceleratorKeyEventArgs)">
	<summary>
 Invoked on every keystroke, including system keys such as Alt key combinations, when
 this page is active and occupies the entire window.  Used to detect keyboard navigation
 between pages even when the page itself doesn't have focus.
 </summary>
	<param name="sender">Instance that triggered the event.</param>
	<param name="args">Event data describing the conditions that led to the event.</param>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.CoreWindow_PointerPressed(Windows.UI.Core.CoreWindow,Windows.UI.Core.PointerEventArgs)">
	<summary>
 Invoked on every mouse click, touch screen tap, or equivalent interaction when this
 page is active and occupies the entire window.  Used to detect browser-style next and
 previous mouse button clicks to navigate between pages.
 </summary>
	<param name="sender">Instance that triggered the event.</param>
	<param name="args">Event data describing the conditions that led to the event.</param>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.StartLayoutUpdates(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
	<summary>
 Invoked as an event handler, typically on the <see cref="E:Windows.UI.Xaml.FrameworkElement.Loaded"/> event of a
 <see cref="T:Windows.UI.Xaml.Controls.Control"/> within the page, to indicate that the sender should start receiving
 visual state management changes that correspond to application view state changes.
 </summary>
	<param name="sender">Instance of <see cref="T:Windows.UI.Xaml.Controls.Control"/> that supports visual state
 management corresponding to view states.</param>
	<param name="e">Event data that describes how the request was made.</param>
	<remarks>The current view state will immediately be used to set the corresponding
 visual state when layout updates are requested.  A corresponding
 <see cref="E:Windows.UI.Xaml.FrameworkElement.Unloaded"/> event handler connected to <see cref="M:WindowsBlogReader.Common.LayoutAwarePage.StopLayoutUpdates(System.Object,Windows.UI.Xaml.RoutedEventArgs)"/> is
 strongly encouraged.  Instances of <see cref="T:WindowsBlogReader.Common.LayoutAwarePage"/> automatically invoke
 these handlers in their Loaded and Unloaded events.</remarks>
	<seealso cref="M:WindowsBlogReader.Common.LayoutAwarePage.DetermineVisualState(Windows.UI.ViewManagement.ApplicationViewState)"/>
	<seealso cref="M:WindowsBlogReader.Common.LayoutAwarePage.InvalidateVisualState"/>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.StopLayoutUpdates(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
	<summary>
 Invoked as an event handler, typically on the <see cref="E:Windows.UI.Xaml.FrameworkElement.Unloaded"/> event of a
 <see cref="T:Windows.UI.Xaml.Controls.Control"/>, to indicate that the sender should start receiving visual state
 management changes that correspond to application view state changes.
 </summary>
	<param name="sender">Instance of <see cref="T:Windows.UI.Xaml.Controls.Control"/> that supports visual state
 management corresponding to view states.</param>
	<param name="e">Event data that describes how the request was made.</param>
	<remarks>The current view state will immediately be used to set the corresponding
 visual state when layout updates are requested.</remarks>
	<seealso cref="M:WindowsBlogReader.Common.LayoutAwarePage.StartLayoutUpdates(System.Object,Windows.UI.Xaml.RoutedEventArgs)"/>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.DetermineVisualState(Windows.UI.ViewManagement.ApplicationViewState)">
	<summary>
 Translates <see cref="T:Windows.UI.ViewManagement.ApplicationViewState"/> values into strings for visual state
 management within the page.  The default implementation uses the names of enum values.
 Subclasses may override this method to control the mapping scheme used.
 </summary>
	<param name="viewState">View state for which a visual state is desired.</param>
	<returns>Visual state name used to drive the <see cref="T:Windows.UI.Xaml.VisualStateManager"/></returns>
	<seealso cref="M:WindowsBlogReader.Common.LayoutAwarePage.InvalidateVisualState"/>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.InvalidateVisualState">
	<summary>
 Updates all controls that are listening for visual state changes with the correct
 visual state.
 </summary>
	<remarks>
 Typically used in conjunction with overriding <see cref="M:WindowsBlogReader.Common.LayoutAwarePage.DetermineVisualState(Windows.UI.ViewManagement.ApplicationViewState)"/> to
 signal that a different value may be returned even though the view state has not
 changed.
 </remarks>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.OnNavigatedTo(Windows.UI.Xaml.Navigation.NavigationEventArgs)">
	<summary>
 Invoked when this page is about to be displayed in a Frame.
 </summary>
	<param name="e">Event data that describes how this page was reached.  The Parameter
 property provides the group to be displayed.</param>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.OnNavigatedFrom(Windows.UI.Xaml.Navigation.NavigationEventArgs)">
	<summary>
 Invoked when this page will no longer be displayed in a Frame.
 </summary>
	<param name="e">Event data that describes how this page was reached.  The Parameter
 property provides the group to be displayed.</param>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.LoadState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
	<summary>
 Populates the page with content passed during navigation.  Any saved state is also
 provided when recreating a page from a prior session.
 </summary>
	<param name="navigationParameter">The parameter value passed to
 <see cref="M:Windows.UI.Xaml.Controls.Frame.Navigate(System.Type,System.Object)"/> when this page was initially requested.
 </param>
	<param name="pageState">A dictionary of state preserved by this page during an earlier
 session.  This will be null the first time a page is visited.</param>
</member><member name="M:WindowsBlogReader.Common.LayoutAwarePage.SaveState(System.Collections.Generic.Dictionary{System.String,System.Object})">
	<summary>
 Preserves state associated with this page in case the application is suspended or the
 page is discarded from the navigation cache.  Values must conform to the serialization
 requirements of <see cref="P:WindowsBlogReader.Common.SuspensionManager.SessionState"/>.
 </summary>
	<param name="pageState">An empty dictionary to be populated with serializable state.</param>
</member><member name="T:WindowsBlogReader.Common.LayoutAwarePage.ObservableDictionary`2">
	<summary>
 Implementation of IObservableMap that supports reentrancy for use as a default
 view model.
 </summary>
</member><member name="T:WindowsBlogReader.Common.LayoutAwarePage">
	<summary>
 Typical implementation of Page that provides several important conveniences:
 <list type="bullet">
			<item>
				<description>Application view state to visual state mapping</description>
			</item>
			<item>
				<description>GoBack, GoForward, and GoHome event handlers</description>
			</item>
			<item>
				<description>Mouse and keyboard shortcuts for navigation</description>
			</item>
			<item>
				<description>State management for navigation and process lifetime management</description>
			</item>
			<item>
				<description>A default view model</description>
			</item>
		</list>
	</summary>
</member><member name="M:WindowsBlogReader.SplitPage.LoadState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
	<summary>
 Populates the page with content passed during navigation.  Any saved state is also
 provided when recreating a page from a prior session.
 </summary>
	<param name="navigationParameter">The parameter value passed to <see cref="M:Windows.UI.Xaml.Controls.Frame.Navigate(System.Type,System.Object)"/>
 when this page was initially requested.
 </param>
	<param name="pageState">A dictionary of state preserved by this page during an earlier
 session.  This will be null the first time a page is visited.</param>
</member><member name="M:WindowsBlogReader.SplitPage.SaveState(System.Collections.Generic.Dictionary{System.String,System.Object})">
	<summary>
 Preserves state associated with this page in case the application is suspended or the
 page is discarded from the navigation cache.  Values must conform to the serialization
 requirements of <see cref="P:WindowsBlogReader.Common.SuspensionManager.SessionState"/>.
 </summary>
	<param name="pageState">An empty dictionary to be populated with serializable state.</param>
</member><member name="M:WindowsBlogReader.SplitPage.UsingLogicalPageNavigation(System.Nullable{Windows.UI.ViewManagement.ApplicationViewState})">
	<summary>
 Invoked to determine whether the page should act as one logical page or two.
 </summary>
	<param name="viewState">The view state for which the question is being posed, or null
 for the current view state.  This parameter is optional with null as the default
 value.</param>
	<returns>True when the view state in question is portrait or snapped, false
 otherwise.</returns>
</member><member name="M:WindowsBlogReader.SplitPage.ItemListView_SelectionChanged(System.Object,Windows.UI.Xaml.Controls.SelectionChangedEventArgs)">
	<summary>
 Invoked when an item within the list is selected.
 </summary>
	<param name="sender">The GridView (or ListView when the application is Snapped)
 displaying the selected item.</param>
	<param name="e">Event data that describes how the selection was changed.</param>
</member><member name="M:WindowsBlogReader.SplitPage.GoBack(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
	<summary>
 Invoked when the page's back button is pressed.
 </summary>
	<param name="sender">The back button instance.</param>
	<param name="e">Event data that describes how the back button was clicked.</param>
</member><member name="M:WindowsBlogReader.SplitPage.DetermineVisualState(Windows.UI.ViewManagement.ApplicationViewState)">
	<summary>
 Invoked to determine the name of the visual state that corresponds to an application
 view state.
 </summary>
	<param name="viewState">The view state for which the question is being posed.</param>
	<returns>The name of the desired visual state.  This is the same as the name of the
 view state except when there is a selected item in portrait and snapped views where
 this additional logical page is represented by adding a suffix of _Detail.</returns>
</member><member name="T:WindowsBlogReader.SplitPage">
	<summary>
 A page that displays a group title, a list of items within the group, and details for
 the currently selected item.
 </summary>
</member>
</members>
</doc>